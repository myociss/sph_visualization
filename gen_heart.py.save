import numpy as np
import matplotlib.pyplot as plt
from scipy.spatial import Delaunay
#from scipy.spatial.
import scipy

def heart_function(x):

    #return ((x[0] ** 2 + 9.0 / 4.0 * x[1] ** 2 + x[2] ** 2 - 1) ** 3 - x[0] ** 2 * x[2] ** 3 - 9.0 / 80.0 * x[1] ** 2 * x[2] ** 3)
    #return x[0]**2 + ( (5*x[1]/4) - abs(x[0])**0.5)**2

    if x[0]**2 + ( (5*x[1]/4) - abs(x[0])**0.5)**2 > 1:
        return 1
    else:
        return 0

xs = []
ys = []

#for i in range(100):
'''
while len(xs) < 100:
    x = -1 + 2*np.random.random()
    y = -1 + 2*np.random.random()

    if np.sqrt(x**2 + y**2) < 1:
        xs.append(x)
        ys.append(y)
'''

edge_min_length = 0.07
edge_max_length = 0.15

points = [[-0.2, 0], [-0.203, -0.08]]

good_tri = False

while not good_tri:

    points_test = np.random.rand(5, 2)
    tri_test = Delaunay(points_test)

    edges = []

    for face in tri_test.simplices:
        x0 = points_test[face[0], 0]
        y0 = points_test[face[0], 1]

        x1 = points_test[face[1], 0]
        y1 = points_test[face[1], 1]

        x2 = points_test[face[2], 0]
        y2 = points_test[face[2], 1]

        e0 = np.sqrt( (x0-x1)**2 + (y0-y1)**2 )
        e1 = np.sqrt( (x1-x2)**2 + (y1-y2)**2 )
        e2 = np.sqrt( (x2-x0)**2 + (y2-y0)**2 )

        edges += [e0,e1,e2]

    if all([elem < edge_max_length and elem > edge_min_length for elem in edges]):
        #points.append([x,y])
        good_tri = True


'''
while len(xs) < 80:
    print(len(xs))

    r = np.sqrt(np.random.random())
    theta = np.random.random() * 2 * np.pi

    x = r * np.cos(theta)
    y = r * np.sin(theta)

    #dists = np.sqrt(np.sum(( np.array([x,y]) - np.array(points) )**2,axis=1))
    #dists = scipy.spatial.distance.cdist(np.array([x,y]), np.array(points))
    dists = np.array([ np.sqrt( (x-xs[i])**2 + (y-ys[i])**2 ) for i in range(len(xs)) ])

    if np.all(dists > 0.1):# and np.all(dists > 0.02):
        #points.append([x,y])
        xs.append(x)
        ys.append(y)
    
    #xs.append(x)
    #ys.append(y)
'''

'''
while len(points) < 10:
    print(len(points))
    r = np.sqrt(np.random.random())
    theta = np.random.random() * 2 * np.pi

    x = r * np.cos(theta)
    y = r * np.sin(theta)

    points_test = np.array(points + [[x,y]])
    tri_test = Delaunay(points_test)

    edges = []

    for face in tri_test.simplices:
        x0 = points_test[face[0], 0]
        y0 = points_test[face[0], 1]

        x1 = points_test[face[1], 0]
        y1 = points_test[face[1], 1]

        x2 = points_test[face[2], 0]
        y2 = points_test[face[2], 1]

        e0 = np.sqrt( (x0-x1)**2 + (y0-y1)**2 )
        e1 = np.sqrt( (x1-x2)**2 + (y1-y2)**2 )
        e2 = np.sqrt( (x2-x0)**2 + (y2-y0)**2 )

        edges += [e0,e1,e2]

    if all([elem < edge_max_length and elem > edge_min_length for elem in edges]):
        points.append([x,y])


#points = np.array([[xs[i],ys[i]] for i in range(len(xs))])
points = np.array(points)
'''
points = points_test

tri = Delaunay(points)
plt.triplot(points[:,0], points[:,1], tri.simplices)

plt.plot(points[:,0], points[:,1], 'o')

plt.show()

exit()


grid_n = 256
grid = np.zeros((grid_n, grid_n))

x_min = -1.5
x_max = 1.5
y_min = -2.1
y_max = 0.7

pixel_size = (x_max - x_min) / grid_n

t_max = 2*np.pi

n_angles = 100

n_points = 8000

x_vals = []
y_vals = []
c_vals = []

'''
for i in range(n_angles):
    t = i * (t_max / n_angles)

    x = np.sqrt(2) * np.sin(t)**3
    y = - np.cos(t)**3 - np.cos(t)**2 + 2*np.cos(t)

    x_vals.append(x)
    y_vals.append(y)
'''



for i in range(n_points):
    '''
    t = np.random.random() * 2 * np.pi
    r = np.random.random() * 3

    heart_x = np.sqrt(2) * np.sin(t)**3
    heart_y = - np.cos(t)**3 - np.cos(t)**2 + 2*np.cos(t)

    heart_r = np.sqrt(heart_x**2 + heart_y**2)

    x_vals.append(r*np.cos(t))
    y_vals.append(r*np.sin(t))


    if r < heart_r:
        c_vals.append(1)
    else:
        c_vals.append(0)

    x_vals.append(heart_x)
    y_vals.append(heart_y)
    c_vals.append(0.5)
    '''


    #x_val = x_min + np.random.random()*(x_max-x_min)
    #y_val = y_min + np.random.random()*(y_max-y_min)

    x_val = - (y_min + np.random.random()*(y_max-y_min))
    y_val = (x_min + np.random.random()*(x_max-x_min))

    t = np.arctan2(y_val, x_val)
    r = np.sqrt(x_val**2 + y_val**2)

    heart_x = np.sqrt(2) * np.sin(t)**3
    heart_y = - np.cos(t)**3 - np.cos(t)**2 + 2*np.cos(t)

    heart_r = np.sqrt(heart_x**2 + heart_y**2)

    x_vals.append(x_val)
    y_vals.append(y_val)

    if r < heart_r:
        c_vals.append(1.0)
    else:
        c_vals.append(0)

    heart_t = np.arctan2(heart_y, heart_x)

    x_vals.append(heart_x)
    y_vals.append(heart_y)

    c_vals.append(0.5)

    print('...')
    print(t)
    print(heart_t)


    #if r < heart_r:
    #    x_vals.append(x_val)
    #    y_vals.append(y_val) 

    
plt.scatter(x_vals, y_vals, c=c_vals, cmap='jet')
plt.show()


'''
x_min = -1.5
x_max = 1.5
y_min = -1.5
y_max = 1.5

n_points = 5000

x_vals = []
y_vals = []
c_vals = []


for i in range(n_points):
    x_val = x_min + np.random.random()*(x_max-x_min)
    y_val = y_min + np.random.random()*(y_max-y_min)
    val = heart_function([x_val,y_val,0])

    x_vals.append(x_val)
    y_vals.append(y_val)
    c_vals.append(val)

plt.scatter(x_vals, y_vals, c=c_vals, cmap='jet')
plt.show()
'''